#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void ordenamientoSecuencial(int lista[], int num, int elemento, double* min_secuencial, double* max_secuencial) {
    clock_t inicio = clock();
    
    for (int i = 0; i < num; i++) {
        if (lista[i] == elemento) {
            printf("Elemento en posicion: %d\n", i + 1);
            clock_t fin = clock();
            double tiempo = ((double)(fin - inicio) / CLOCKS_PER_SEC) * 1000;
            
            // Actualizar valores mínimo y máximo
            if (*min_secuencial == -1 || tiempo < *min_secuencial) {
                *min_secuencial = tiempo;
            }
            if (tiempo > *max_secuencial) {
                *max_secuencial = tiempo;
            }
            
            return;
        }
    }
    printf("Elemento no se encuentra\n");
}

void ordenamientoBinario(int lista[], int num, int elemento, double* min_binario, double* max_binario) {
    clock_t inicio = clock();
    
    int primero = 0;
    int ultimo = num - 1;
    int mitad;

    while (primero <= ultimo) {
        mitad = (primero + ultimo) / 2;

        if (lista[mitad] < elemento) {
            primero = mitad + 1;
        } else if (lista[mitad] == elemento) {
            printf("Posicion: %d\n", mitad + 1);
            clock_t fin = clock();
            double tiempo = ((double)(fin - inicio) / CLOCKS_PER_SEC) * 1000;
            
            // Actualizar valores mínimo y máximo
            if (*min_binario == -1 || tiempo < *min_binario) {
                *min_binario = tiempo;
            }
            if (tiempo > *max_binario) {
                *max_binario = tiempo;
            }
            
            return;
        } else {
            ultimo = mitad - 1;
        }
    }

    printf("Elemento no se encuentra\n");
}

int main() {
    int i, j, num, elemento;
    int r = 100;
    double tiempo_secuencial = 0, tiempo_binario = 0;
    double min_secuencial = -1, max_secuencial = 0;
    double min_binario = -1, max_binario = 0;

    srand((unsigned)time(NULL));

    printf("Numero de elementos a crear: ");
    scanf("%d", &num);
    int lista[num];

    printf("Elemento a buscar: ");
    scanf("%d", &elemento);

    // Realiza el ordenamiento y la búsqueda 100 veces
    for (i = 0; i < r; i++) {
        // Inicializa la lista con números aleatorios
        for (j = 0; j < num; j++) {
            lista[j] = rand() % 50000;
        }

        // Ordenamiento secuencial
        double min_temp_secuencial = -1, max_temp_secuencial = 0;
        ordenamientoSecuencial(lista, num, elemento, &min_temp_secuencial, &max_temp_secuencial);
        tiempo_secuencial += min_temp_secuencial;

        // Ordenamiento binario
        double min_temp_binario = -1, max_temp_binario = 0;
        ordenamientoBinario(lista, num, elemento, &min_temp_binario, &max_temp_binario);
        tiempo_binario += min_temp_binario;

        // Actualizar valores mínimo y máximo globales
        if (min_secuencial == -1 || min_temp_secuencial < min_secuencial) {
            min_secuencial = min_temp_secuencial;
        }
        if (max_temp_secuencial > max_secuencial) {
            max_secuencial = max_temp_secuencial;
        }

        if (min_binario == -1 || min_temp_binario < min_binario) {
            min_binario = min_temp_binario;
        }
        if (max_temp_binario > max_binario) {
            max_binario = max_temp_binario;
        }
    }

    // Calcula el tiempo promedio en milisegundos
    double tiempo_promedio_secuencial = tiempo_secuencial / r;
    double tiempo_promedio_binario = tiempo_binario / r;

    printf("\nSecuencial:\n");
    printf("Tiempo promedio: %.2f ms\n", tiempo_promedio_secuencial);
    printf("Tiempo minimo: %.2f ms\n", min_secuencial);
    printf("Tiempo maximo: %.2f ms\n", max_secuencial);

    printf("\nBinario:\n");
    printf("Tiempo promedio: %.2f ms\n", tiempo_promedio_binario);
    printf("Tiempo minimo: %.2f ms\n", min_binario);
    printf("Tiempo maximo: %.2f ms\n", max_binario);

    return 0;
}
