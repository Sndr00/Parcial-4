#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void insertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(&arr[j], &arr[j + 1]);
            }
        }
    }
}

void generateRandomArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 10000; 
    }
}

int main() {
    const int arraySize = 10000;
    int arr[arraySize];
    int tempArr[arraySize];
    clock_t start, end;
    double elapsedTime;

    srand(time(NULL));

 
    generateRandomArray(arr, arraySize);

    
    double insertionSortTimes[100];
    for (int i = 0; i < 100; i++) {
        
        for (int j = 0; j < arraySize; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        insertionSort(tempArr, arraySize);
        end = clock();

        elapsedTime = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
        insertionSortTimes[i] = elapsedTime;
    }

    
    double quickSortTimes[100];
    for (int i = 0; i < 100; i++) {
        
        for (int j = 0; j < arraySize; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        quickSort(tempArr, 0, arraySize - 1);
        end = clock();

        elapsedTime = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
        quickSortTimes[i] = elapsedTime;
    }

   
    double bubbleSortTimes[100];
    for (int i = 0; i < 100; i++) {
        
        for (int j = 0; j < arraySize; j++) {
            tempArr[j] = arr[j];
        }

        start = clock();
        bubbleSort(tempArr, arraySize);
        end = clock();

        elapsedTime = ((double)(end - start)) / CLOCKS_PER_SEC * 1000;
        bubbleSortTimes[i] = elapsedTime;
    }

 
    double insertionSortProm = 0, quickSortProm = 0, bubbleSortProm = 0;
    double insertionSortMin = insertionSortTimes[0], quickSortMin = quickSortTimes[0], bubbleSortMin = bubbleSortTimes[0];
    double insertionSortMax = insertionSortTimes[0], quickSortMax = quickSortTimes[0], bubbleSortMax = bubbleSortTimes[0];

    for (int i = 0; i < 100; i++) {
        insertionSortProm += insertionSortTimes[i];
        quickSortProm += quickSortTimes[i];
        bubbleSortProm += bubbleSortTimes[i];

        
        if (insertionSortTimes[i] < insertionSortMin) {
            insertionSortMin = insertionSortTimes[i];
        }
        if (insertionSortTimes[i] > insertionSortMax) {
            insertionSortMax = insertionSortTimes[i];
        }

        if (quickSortTimes[i] < quickSortMin) {
            quickSortMin = quickSortTimes[i];
        }
        if (quickSortTimes[i] > quickSortMax) {
            quickSortMax = quickSortTimes[i];
        }

        if (bubbleSortTimes[i] < bubbleSortMin) {
            bubbleSortMin = bubbleSortTimes[i];
        }
        if (bubbleSortTimes[i] > bubbleSortMax) {
            bubbleSortMax = bubbleSortTimes[i];
        }
    }

    insertionSortProm /= 100;
    quickSortProm /= 100;
    bubbleSortProm /= 100;

  
    printf("Insertion Sort:\n");
    printf("Tiempo promedio: %.2f milisegundos\n", insertionSortProm);
    printf("Tiempo minimo: %.2f milisegundos\n", insertionSortMin);
    printf("Tiempo maximo: %.2f milisegundos\n\n", insertionSortMax);

    printf("Quick Sort:\n");
    printf("Tiempo promedio: %.2f milisegundos\n", quickSortProm);
    printf("Tiempo minimo: %.2f milisegundos\n", quickSortMin);
    printf("Tiempo maximo: %.2f milisegundos\n\n", quickSortMax);

    printf("Bubble Sort:\n");
    printf("Tiempo promedio: %.2f milisegundos\n", bubbleSortProm);
    printf("Tiempo minimo: %.2f milisegundos\n", bubbleSortMin);
    printf("Tiempo maximo: %.2f milisegundos\n", bubbleSortMax);

    return 0;
}
